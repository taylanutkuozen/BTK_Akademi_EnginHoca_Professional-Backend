DevFramework.Northwind.Entities= Veri tabaný nesnelerini tutacaðýmýz veya veri tabanýndaki joinler sonucunda oluþacak kompleks type'leri veya uygulama boyunca kullanabileceðimiz nesneleri buraya ekleyeceðiz.
DevFramework.Northwind.DataAccess=Veri tabanýnda insert, update, delete, select sorgularýnýn çalýþacaðý katmandýr. ORM sorgularý burada gerçekleþecektir.
DevFramework.Northwind.Business=Projeyi ilgilendiren iþ süreçlerinin kodlarý. Örneðin bir kiþinin ehliyet alacak, örneðin ilk yardým motor sýnavlarýndan geçer not almýþ mý?
DevFramework.Northwind.MvcWebUI=Bir arayüz. Ve testler yazýlacak(DevFramework.Northwind.MvcWebUI.Tests)
DevFramework.DataAccess.Tests=Unit Test Project
DevFramework.Northwind.Business.Tests=Unit Test Project
DevFramework.Northwind.WebAPI=Web API projemiz
DevFramework.Northwind.WcfService=Wcf entegrasyonu olacak. WCF besleyecek. WcfService Solution içerisine eklememiz gerekiyor.
---------------------------------------------
**Bir teknoloji ile çalýþýlýyor ise o teknoloji mutlaka klasörlenmelidir.(Örnek EntityFramework,NHibernate)
------------------------------------
DataAccess
*Abstract=Diðer katmanlarýn veriye eriþim iletiþim kurmasý için kullanýlacaktýr. Soyut class'lar. Business Layer veya Project NHibernate yada EntityFramework baðlý olmayacak.
*Concrete=Asýl implementasyonu yapacak olan class'lar
-----------
Entities
*Complex Type=2 veya 3 tablonun sonucunda oluþan nesne veya dto'lar
--------------
//Devart? araþtýr
------------
14.Adýmda =Data Access.Tests içerisinde App.config'te connection string eklendi. DataAccess.Tests içerisine EntityFramework eklendi.
--------------------
Complex Types=Product ve Category nin join edilmiþ hali örnektir.
-------------
Kurumsal Framework Yazýmý - II
C#
Fluent Validation
Ninject
PostSharp
MemoryCache
Moq ile Validation,
Cache ve Transaction Aspect Tasarýmý
-----------------------------------------
22.Adým= Validation bir nesnenin format olarak uyumluluðu anlamýna gelmektedir. Business süreçlerini dahil etmek için format olarak uyumlu mu?
-----------
23.Adým=CrossCutting=Uygulamanýn belirli yerlerinde uygulamaya ek olarak çaðýrýrýz.
------------------
26.Adým= Fake veya spy datalar nesneler oluþturmamýzý saðlayan Moq kullanacaðýz.
temel kural=bir katmaný test ederken diðer katman test edilmez. IProductDal'ý Fake bir þekilde kullanmak için Moq kullanacaðýz.
----------------
27.Adým = Business katmanýnda Dependency Injection yapýyoruz. Dependency Injection Container ihtiyaç vardýr. Factory Design patternini implemente eden bir wrapper(sarmallayýcý) görevi görür. Ninject, Autofact gibi araçlar vardýr.
------
29.Adým=Transaction Yönetimi : Business Manager geldiðimizde Add ve Update iþlemlerini arka arkaya yapabiliriz. 1.iþlem baþarýlý olabilir 2.iþlem baþarýsýz olabilir 3.iþlem baþarýlý olabilir. Baþarýsýz iþlemi geri almak isteyebiliriz.
---------
31.Adým=Bir data arzu edildiðinde cache eklenecek. O datayý kullanan diðer kullanýcýlar cache'ta cache üzerinden datayý çekebilecek. output cache=Eðer ki bir data parametreleri ile birlikte cachelenirse ayný parametrelerle cachelensin. Datayý uygulama sunucusunun belleðinde tutacak. Belleðindeki dataya göre belleðini tüketerek diðer kullanýcýlar bu data üzerinden iþlem yapabilecek.(MemoryCache)
------------
C#
AspNet MVC
Log4Net
PostSharp
MemoryCache ile Profesyonel Loglama
Cache
Performans Yönetimi
---------
42.Adým log4net.config ve web.config içerisinde log4net ile ilgili alanlardýr. log4net.config içerisinde FileLogger ve SqlServerAppender kontrol edildi.